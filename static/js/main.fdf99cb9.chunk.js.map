{"version":3,"sources":["ImageComponent.js","TextOverlayComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ImageComponent","_ref","imageUrl","texts","index_image","containerRef","useRef","useEffect","image","Image","src","onload","container","current","style","width","concat","height","React","createElement","ref","className","position","alt","map","text","index","Draggable","key","axis","handle","defaultPosition","x","y","grid","scale","bounds","display","whiteSpace","cursor","content","TextOverlayComponent","onAddTextOverlay","imageSize","setContent","useState","type","placeholder","value","onChange","e","target","onClick","handleAddTextOverlay","App","panelText","setPanelText","Array","fill","comicPanels","setComicPanels","loading","setLoading","textOverlays","setTextOverlays","parallaxRef","parallaxBackground","handleScroll","scrolled","window","scrollY","transform","addEventListener","removeEventListener","newText","prevText","newTextArray","async","promises","trim","response","fetch","headers","method","body","JSON","stringify","data","result","blob","console","log","query","inputs","catch","error","Promise","resolve","urls","all","filter","URL","createObjectURL","length","alert","disabled","url","textOverlay","prevTextOverlays","newTextOverlays","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.fdf99cb9.chunk.js","sourcesContent":["// ImageComponent.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport Draggable from 'react-draggable';\r\nimport './ImageComponent.css';\r\n\r\nconst ImageComponent = ({ imageUrl, texts, index_image }) => {\r\n    const containerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const image = new Image();\r\n        image.src = imageUrl;\r\n\r\n        image.onload = () => {\r\n            const container = containerRef.current;\r\n            container.style.width = `${image.width}px`;\r\n            container.style.height = `${image.height}px`;\r\n        };\r\n    }, [imageUrl]);\r\n\r\n    return (\r\n        <div ref={containerRef} className={`image-container-${index_image}`} style={{ position: 'relative' }}>\r\n            <img className={`image-${index_image}`} src={imageUrl} alt=\"response\" />\r\n            {texts.map((text, index) => (\r\n                <Draggable\r\n                    key={index}\r\n                    axis=\"both\"\r\n                    handle={`.handle-${index}`}\r\n                    defaultPosition={{ x: 0, y: 0 }}\r\n                    position={null}\r\n                    grid={[25, 25]}\r\n                    scale={1}\r\n                    bounds={`.image-container-${index_image}`}\r\n                >\r\n                    <div className={`handle handle-${index}`} style={{ display: 'inline-block', whiteSpace: 'nowrap', cursor: 'pointer' }}>\r\n                        {text.content}\r\n                    </div>\r\n                </Draggable>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageComponent;\r\n","// TextOverlayComponent.js\r\nimport React, { useState } from 'react';\r\nimport './TextOverlayComponent.css';\r\n\r\nconst TextOverlayComponent = ({ onAddTextOverlay, imageSize, index }) => {\r\n    const [content, setContent] = useState('');\r\n\r\n    const handleAddTextOverlay = () => {\r\n        const textOverlayToAdd = {\r\n            content,\r\n        };\r\n        onAddTextOverlay(textOverlayToAdd, index);\r\n        setContent('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"text-overlay-container\">\r\n            <input\r\n                className=\"text-overlay-input\"\r\n                type=\"text\"\r\n                placeholder=\"Enter Text\"\r\n                value={content}\r\n                onChange={(e) => setContent(e.target.value)}\r\n            />\r\n            <button className=\"text-overlay-button\" onClick={handleAddTextOverlay}>\r\n                Add Speech Bubble\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextOverlayComponent;\r\n","import React, { useState } from 'react';\r\nimport { useEffect, useRef } from 'react';\r\nimport ImageComponent from './ImageComponent';\r\nimport TextOverlayComponent from './TextOverlayComponent';\r\n\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [panelText, setPanelText] = useState(Array(10).fill(''));\r\n  const [comicPanels, setComicPanels] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [textOverlays, setTextOverlays] = useState(Array(10).fill([]));\r\n  const imageSize = { width: 512, height: 512 };\r\n\r\n  const query = async (data) => {\r\n    const response = await fetch(\r\n      \"https://xdwvg9no7pefghrn.us-east-1.aws.endpoints.huggingface.cloud\",\r\n      {\r\n        headers: {\r\n          \"Accept\": \"image/png\",\r\n          \"Authorization\": `Bearer VknySbLLTUjbxXAXCjyfaFIPwUTCeRXbFSOjwRiCxsxFyhbnGjSFalPKrpvvDAaPVzWEevPljilLVDBiTzfIbWFdxOkYJxnOPoHhkkVGzAknaOulWggusSFewzpqsNWM`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n      }\r\n    );\r\n    const result = await response.blob();\r\n    console.log(\"received\");\r\n    return result;\r\n  };\r\n\r\n  const parallaxRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const parallaxBackground = parallaxRef.current;\r\n\r\n    const handleScroll = () => {\r\n      const scrolled = window.scrollY;\r\n      parallaxBackground.style.transform = `translate3d(0, ${scrolled * 0.5}px, 0)`;\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  const generateComic = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const promises = panelText.map((text, index) => {\r\n        if (text.trim() !== '') {\r\n          // Only make API call if text is not empty or only whitespace\r\n          return query({ inputs: text }).catch((error) => {\r\n            console.error(`Error generating comic for panel ${index + 1}:`, error);\r\n            return null;\r\n          });\r\n        } else {\r\n          // If text is empty, return a resolved Promise with null\r\n          return Promise.resolve(null);\r\n        }\r\n      });\r\n\r\n      const responses = await Promise.all(promises);\r\n      const urls = responses\r\n        .filter((response) => response !== null)\r\n        .map((response) => URL.createObjectURL(response));\r\n      setComicPanels(urls);\r\n\r\n      if (urls.length === 0) {\r\n        alert('No non-empty text provided. Please fill in at least one text box.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error generating comic:', error);\r\n      alert('Failed to generate comic. Please check the console for details.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddTextOverlay = (textOverlay, index) => {\r\n    setTextOverlays((prevTextOverlays) => {\r\n      const newTextOverlays = [...prevTextOverlays];\r\n      newTextOverlays[index] = [...newTextOverlays[index], textOverlay];\r\n      return newTextOverlays;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <body className=\"parallax-background\" ref={parallaxRef}>\r\n      <div className=\"parallax-container\">\r\n        <div className=\"App\">\r\n          <h1><center>COMIC STRIP GENERATOR</center></h1>\r\n          <div>\r\n            {/* Your Form for Inputting Text */}\r\n            <div className=\"panel\">\r\n              {panelText.map((text, index) => (\r\n                <div key={index} className=\"panel-container\">\r\n                  <textarea className=\"text\"\r\n                    type=\"text\"\r\n                    value={text}\r\n                    onChange={(e) => {\r\n                      const newText = e.target.value;\r\n                      setPanelText((prevText) => {\r\n                        const newTextArray = [...prevText];\r\n                        newTextArray[index] = newText;\r\n                        return newTextArray;\r\n                      });\r\n                    }}\r\n                  />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Button to Generate Comic */}\r\n          <button className=\"but\" onClick={generateComic} disabled={loading}>\r\n            <h3>  GENERATE COMIC </h3>\r\n          </button>\r\n\r\n          {/* Display Generated Comic Panels */}\r\n          <div className=\"comic-display\">\r\n            {comicPanels.map((url, index) => (\r\n              <div key={index} className=\"comic-panel\">\r\n                <ImageComponent imageUrl={url} texts={textOverlays[index]} index_image={index} />\r\n                <TextOverlayComponent onAddTextOverlay={(textOverlay) => handleAddTextOverlay(textOverlay, index)} imageSize={imageSize} index={index} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </body>\r\n\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport 'dotenv/config';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}